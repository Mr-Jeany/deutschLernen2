import asyncio
import logging

from question_api import *
import config
import lang_utils

from aiogram.enums import ParseMode
from aiogram import Bot, Dispatcher, F
from aiogram import html
from aiogram.filters.command import Command
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove

logging.basicConfig(level=logging.INFO)

TOKEN = config.TOKEN
password = config.password

bot = Bot(token=TOKEN)

disp = Dispatcher()


@disp.message(Command("start"))
async def start(message: Message):
    kb = [
        [
            KeyboardButton(text="üçé Geschlecht von Substantiven")
        ],
        [
            KeyboardButton(text="üö∂‚Äç‚ôÇÔ∏è Verben"),
            KeyboardButton(text="üìù Pluralformen")
        ]
    ]
    keyboard = ReplyKeyboardMarkup(keyboard=kb,
                                   resize_keyboard=True,
                                   input_field_placeholder="–ß—Ç–æ –º—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∫—Ç–∏–∫—É–µ–º??")
    await message.reply("üëã Hallo...\n–î–∞–≤–∞–π—Ç–µ —É—á–∏—Ç—å deutsch Sprache –≤–º–µ—Å—Ç–µ... \nLasst uns gemeinsam Deutsch lernen!", reply_markup=keyboard)

@disp.message(F.text == "üìù Pluralformen")
async def plural(message: Message, variables: dict):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∂–∏–º–∞
    if message.chat not in variables:
        variables[message.chat] = {}

    variables[message.chat]["mode"] = 1
    # - –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏

    q = get_random_noun_with_answer()
    que = q[0]
    variables[message.chat]["correct_answer"] = q[1]
    await message.answer(f"Okay, sehr gut!\n–Ø –Ω–∞–∑—ã–≤–∞—é —Ç–µ–±–µ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º, –∞ —Ç—ã –º–Ω–µ –≥–æ–≤–æ—Ä–∏—à—å –µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ —Å —á–∞—Å—Ç–∏—Ü–æ–π",
                        reply_markup=ReplyKeyboardRemove())

    await message.answer(f"–°–ª–æ–≤–æ: {html.italic(que)}", parse_mode=ParseMode.HTML)

@disp.message(F.text == "üçé Geschlecht von Substantiven")
async def genders(message: Message, variables: dict):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∂–∏–º–∞
    if message.chat not in variables:
        variables[message.chat] = {}

    variables[message.chat]["mode"] = 1
    # - –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏

    q = get_random_gender_with_answer()
    que = q[0]
    variables[message.chat]["correct_answer"] = q[1]
    await message.answer(f"Okay, sehr gut!\nIch nenne dir ein Nomen und du nennst mir sein Geschlecht\nm - m√§nnlich; w - weiblich; s - s√§chlich",
                        reply_markup=ReplyKeyboardRemove())

    await message.answer(f"Nomen: {html.italic(que)}", parse_mode=ParseMode.HTML)

@disp.message(F.text == "üö∂‚Äç‚ôÇÔ∏è Verben")
async def verbs(message: Message, variables: dict):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ–∂–∏–º–∞
    if message.chat not in variables:
        variables[message.chat] = {}

    variables[message.chat]["mode"] = 1
    # - –ö–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏

    q = get_random_verb_with_answer()
    que = q[0]
    variables[message.chat]["correct_answer"] = q[1]
    pronoun = q[2]
    await message.answer(f"Okay, sehr gut!\n–Ø –≥–æ–≤–æ—Ä—é —Ç–µ–±–µ –≥–ª–∞–≥–æ–ª –∏ –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ, –∞ —Ç—ã –º–Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–ø—Ä—è–∂–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –≥–ª–∞–≥–æ–ª–∞ —Å —ç—Ç–∏–º –º–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ–º...",
                        reply_markup=ReplyKeyboardRemove())

    await message.answer(f"–ì–ª–∞–≥–æ–ª: {html.italic(que)}\n–ú–µ—Å—Ç–æ–∏–º–µ–Ω–∏–µ: {html.italic(pronoun)}", parse_mode=ParseMode.HTML)

@disp.message(Command(f"add_question_{password}"))
async def add_question(message: Message):
    split_message_text = message.text.replace(",", "").split()
    adding_changed_to = split_message_text[1]

    old_to_add = split_message_text[2::]

    to_add = [lang_utils.umlauts_and_eszett(a) for a in old_to_add]

    if adding_changed_to == "verb":
        Editor.add_verb(to_add)

    elif adding_changed_to == "genders":
        Editor.add_gender(to_add)

    elif adding_changed_to == "plurals":
        to_add = [i.replace("_", " ") for i in to_add]
        if not Editor.add_noun(to_add):
            await message.reply("Error occurred when trying to add to \"noun_plurals\". Try again or check for the mistakes.")
            return

    else:
        await message.reply("Incorret argument used. Use verb/genders/plurals.")
        return

    await message.reply(f"Successfully added {to_add} to \"{adding_changed_to}\"")



@disp.message(F.text)
async def general_message_getter(message: Message, variables: dict):
    if message.chat not in variables or variables[message.chat]["mode"] == 0:
        await message.answer(f"Oh, es tut mir leid. –Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã üòî")

    else:
        # –°—Ç–∞–≤–∏–º —Ä–µ–∂–∏–º —Å–Ω–æ–≤–∞ –≤ "—Å–æ–Ω"
        variables[message.chat]["mode"] = 0

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        corr = variables[message.chat]["correct_answer"]

        kb = [
            [
                KeyboardButton(text="üçé Geschlecht von Substantiven")
            ],
            [
                KeyboardButton(text="üö∂‚Äç‚ôÇÔ∏è Verben"),
                KeyboardButton(text="üìù Pluralformen")
            ]
        ]

        keyboard = ReplyKeyboardMarkup(keyboard=kb,
                                       resize_keyboard=True,
                                       input_field_placeholder="–ß—Ç–æ –º—ã —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∫—Ç–∏–∫—É–µ–º??")

        if lang_utils.umlauts_and_eszett(message.text) == corr:
            await message.reply(f"Sehr gut! Richtig!", reply_markup=keyboard)
        else:
            await message.reply(f"Oh! Nein... –ü—Ä–∞–≤–∏–ª—å–Ω–æ –±—ã–ª–æ {html.italic(corr)}... Passiert:)", reply_markup=keyboard, parse_mode=ParseMode.HTML)



async def main():
    await disp.start_polling(bot, variables={"correct_answer": "",})



if __name__ == "__main__":
    print(f"Current password: {password}")
    asyncio.run(main())

